// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  SoundsCreated  Sound[]   @relation("created")
  SoundsModified Sound[]   @relation("modified")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sound {
  soundid      String   @id @default(uuid())
  guildid      String
  name         String
  hidden       Boolean
  deleted      Boolean  @default(false)
  fileDeleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  createdById  String?
  modifiedAt   DateTime @default(now()) @updatedAt
  modifiedById String?
  plays        Play[]
  entrees      Entree[]
  createdBy    User?    @relation(fields: [createdById], references: [id], onDelete: SetNull, name: "created")
  modifiedBy   User?    @relation(fields: [modifiedById], references: [id], onDelete: SetNull, name: "modified")
}

model Play {
  userid  String
  soundid String
  time    DateTime @default(now())
  sound   Sound    @relation(fields: [soundid], references: [soundid], onDelete: Cascade)

  @@id([soundid, time])
}

model Entree {
  guildid String
  userid  String
  soundid String

  sound Sound @relation(fields: [soundid], references: [soundid], onDelete: Cascade)

  @@id([guildid, userid])
}

model Limit {
  guildid String @id
  limit   Int
}

model GuildLastUpdate {
  guildid    String   @id
  lastUpdate DateTime
}
